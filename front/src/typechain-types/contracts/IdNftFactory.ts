/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IdNftFactoryInterface extends utils.Interface {
  functions: {
    "createIdNftCollection(string,string,string)": FunctionFragment;
    "getOwnCollections()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createIdNftCollection" | "getOwnCollections"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createIdNftCollection",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnCollections",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createIdNftCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnCollections",
    data: BytesLike
  ): Result;

  events: {
    "CreatedNFTCollection(address,address,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedNFTCollection"): EventFragment;
}

export interface CreatedNFTCollectionEventObject {
  creator: string;
  nft: string;
  name: string;
  symbol: string;
  properties: string;
}
export type CreatedNFTCollectionEvent = TypedEvent<
  [string, string, string, string, string],
  CreatedNFTCollectionEventObject
>;

export type CreatedNFTCollectionEventFilter =
  TypedEventFilter<CreatedNFTCollectionEvent>;

export interface IdNftFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdNftFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createIdNftCollection(
      _name: string,
      _symbol: string,
      _propertiesURL: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOwnCollections(overrides?: CallOverrides): Promise<[string[]]>;
  };

  createIdNftCollection(
    _name: string,
    _symbol: string,
    _propertiesURL: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOwnCollections(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    createIdNftCollection(
      _name: string,
      _symbol: string,
      _propertiesURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnCollections(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "CreatedNFTCollection(address,address,string,string,string)"(
      creator?: null,
      nft?: null,
      name?: null,
      symbol?: null,
      properties?: null
    ): CreatedNFTCollectionEventFilter;
    CreatedNFTCollection(
      creator?: null,
      nft?: null,
      name?: null,
      symbol?: null,
      properties?: null
    ): CreatedNFTCollectionEventFilter;
  };

  estimateGas: {
    createIdNftCollection(
      _name: string,
      _symbol: string,
      _propertiesURL: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOwnCollections(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createIdNftCollection(
      _name: string,
      _symbol: string,
      _propertiesURL: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOwnCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
